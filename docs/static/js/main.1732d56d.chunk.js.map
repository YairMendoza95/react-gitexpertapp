{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAsCeA,EAnCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAmBvC,OAEI,0BAAMC,SAbW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,YCIhBG,EAVK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC9B,OAEI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,iDAEmCO,UAClDF,GAHe,+DAMDG,MAAMR,GANL,cAMbS,EANa,gBAOIA,EAAIC,OAPR,uBAOXC,EAPW,EAOXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC5BhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MAEXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAbnB,kBAgBZY,GAhBY,4CAAH,sDC6BLK,EA1BC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECAN,SAACA,GAAc,IAAD,EACZrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAVAC,qBAAU,WAENjB,EAAQC,GAAUiB,MAAK,SAACC,GACpBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGlB,CAACb,IAEGc,EDhB2BK,CAAanB,GAAjCU,EADgB,EACtBJ,KAAcO,EADQ,EACRA,QAOtB,OACI,oCACI,wBAAIjB,UAAU,yCACTI,GAEJa,GACG,uBAAGjB,UAAU,oCAAb,YAEJ,yBAAKA,UAAU,aACVc,EAAOF,KAAI,SAACC,GAAD,OAER,kBAAC,EAAD,eAAaW,IAAKX,EAAIhB,IAAQgB,UEFnCY,EAjBM,WAAO,IAAD,EACa1C,mBAAS,CAAC,WADvB,mBAChB2C,EADgB,KACJ5C,EADI,KAGvB,OACI,oCACI,8CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACK4C,EAAWd,KAAI,SAACR,GAAD,OACZ,kBAAC,EAAD,CAASoB,IAAKpB,EAAUA,SAAUA,UCTtDuB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.1732d56d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    // Si se deja el useState vacío este sería undefined, por ello, se deja un string vacío\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        // Debido a que ya no es muy usado la parte del refresh completo del navegador, que es un comportamiento por default de los formularios se utiliza la siguiente linea de código\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 1) {\r\n            // Como no se tiene acceso a las categorias del componente padre hace uso un callback como se muestra\r\n            setCategories((cats) => [inputValue, ...cats]);\r\n            setinputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        // Cuando se retorna na unica etiqueta agrupadora como es en este caso el form no es necesario agruparla dentro de un Fragment\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        // En los componentes las clases de CSS se asignan por medio de la palabra className, debido a que como se están ocupando archivos de JS, si uno escribe solo class=\"\", REact no sabe si es una clase de CSS o de JS\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;\r\n","// Los helpers son funciones que no mutan tal cual el estado del componente, como un evento\r\nexport const getGifs = async (category) => {\r\n    // El método encodeURI  codifica espacios y caracteres especiales\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n        category\r\n    )}&limit=10&api_key=hgDKm28QdpzAtF4zSKPcKDaWwHuB73AU`;\r\n\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    const gifs = data.map((img) => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        // El signo de interrogación después de la palabra images es un condicional y significa que en caso de que se encuentre el image regresará todo la propiedad\r\n        url: img.images?.downsized_medium.url,\r\n    }));\r\n\r\n    return gifs;\r\n};\r\n","import React /* { useState, useEffect } */ from 'react';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    /* useEffect(() => {\r\n        \r\n        getGifs(category).then(setImages);\r\n    }, [category]); */\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInDown\">\r\n                {category}\r\n            </h3>\r\n            {loading && (\r\n                <p className=\"animate__animated animate__flash\">Cargando</p>\r\n            )}\r\n            <div className=\"card-grid\">\r\n                {images.map((img) => (\r\n                    // Cuando se envían objetos con varias propiedades, como atributo en el lado del componente padre se puede destructurar con el operador Spread\r\n                    <GifGridItem key={img.id} {...img} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n// Los hooks por estandar inician con la palabra \"use\" y estos son funciones, tampoco pueden ser asincronos\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    // El useEffect condiciona la ejecución de un bloque de código al recibir un arreglo de dependencias, cuando el arreglo está vaío solo lo ejecuta una vez\r\n    useEffect(() => {\r\n        // Recibe el nombre de una categoría y muestra un arreglo de los gifs que coincidan con la búsqueda\r\n        getGifs(category).then((imgs) => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Naruto']);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <ol>\r\n                {categories.map((category) => (\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}